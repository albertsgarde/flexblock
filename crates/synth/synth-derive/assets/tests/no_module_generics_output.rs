# [derive (Clone)] pub struct Foo { bar : f32 , } impl < RHS : crate :: modules :: Module > std :: ops :: Add < RHS > for Foo { type Output = crate :: modules :: Add < Foo , RHS > ; fn add (self , rhs : RHS) -> Self :: Output { crate :: modules :: Add :: new (self , rhs) } } impl < RHS : crate :: modules :: Module > std :: ops :: Sub < RHS > for Foo { type Output = crate :: modules :: Subtract < Foo , RHS > ; fn sub (self , rhs : RHS) -> Self :: Output { crate :: modules :: Subtract :: new (self , rhs) } } impl < RHS : crate :: modules :: Module > std :: ops :: Mul < RHS > for Foo { type Output = crate :: modules :: Multiply < Foo , RHS > ; fn mul (self , rhs : RHS) -> Self :: Output { crate :: modules :: Multiply :: new (self , rhs) } }